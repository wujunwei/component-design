// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoreClient is the client API for Core service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreClient interface {
	Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*OK, error)
	Install(ctx context.Context, in *Component, opts ...grpc.CallOption) (*OK, error)
	Uninstall(ctx context.Context, in *ComponentInfo, opts ...grpc.CallOption) (*OK, error)
	ComponentExist(ctx context.Context, in *ComponentInfo, opts ...grpc.CallOption) (*ComponentHealthyInfo, error)
	Register(ctx context.Context, in *ServerInfo, opts ...grpc.CallOption) (*OK, error)
}

type coreClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreClient(cc grpc.ClientConnInterface) CoreClient {
	return &coreClient{cc}
}

func (c *coreClient) Ping(ctx context.Context, in *PingMessage, opts ...grpc.CallOption) (*OK, error) {
	out := new(OK)
	err := c.cc.Invoke(ctx, "/Core/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Install(ctx context.Context, in *Component, opts ...grpc.CallOption) (*OK, error) {
	out := new(OK)
	err := c.cc.Invoke(ctx, "/Core/Install", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Uninstall(ctx context.Context, in *ComponentInfo, opts ...grpc.CallOption) (*OK, error) {
	out := new(OK)
	err := c.cc.Invoke(ctx, "/Core/Uninstall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) ComponentExist(ctx context.Context, in *ComponentInfo, opts ...grpc.CallOption) (*ComponentHealthyInfo, error) {
	out := new(ComponentHealthyInfo)
	err := c.cc.Invoke(ctx, "/Core/ComponentExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Register(ctx context.Context, in *ServerInfo, opts ...grpc.CallOption) (*OK, error) {
	out := new(OK)
	err := c.cc.Invoke(ctx, "/Core/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServer is the server API for Core service.
// All implementations must embed UnimplementedCoreServer
// for forward compatibility
type CoreServer interface {
	Ping(context.Context, *PingMessage) (*OK, error)
	Install(context.Context, *Component) (*OK, error)
	Uninstall(context.Context, *ComponentInfo) (*OK, error)
	ComponentExist(context.Context, *ComponentInfo) (*ComponentHealthyInfo, error)
	Register(context.Context, *ServerInfo) (*OK, error)
	mustEmbedUnimplementedCoreServer()
}

// UnimplementedCoreServer must be embedded to have forward compatible implementations.
type UnimplementedCoreServer struct {
}

func (UnimplementedCoreServer) Ping(context.Context, *PingMessage) (*OK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedCoreServer) Install(context.Context, *Component) (*OK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Install not implemented")
}
func (UnimplementedCoreServer) Uninstall(context.Context, *ComponentInfo) (*OK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uninstall not implemented")
}
func (UnimplementedCoreServer) ComponentExist(context.Context, *ComponentInfo) (*ComponentHealthyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComponentExist not implemented")
}
func (UnimplementedCoreServer) Register(context.Context, *ServerInfo) (*OK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedCoreServer) mustEmbedUnimplementedCoreServer() {}

// UnsafeCoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreServer will
// result in compilation errors.
type UnsafeCoreServer interface {
	mustEmbedUnimplementedCoreServer()
}

func RegisterCoreServer(s grpc.ServiceRegistrar, srv CoreServer) {
	s.RegisterService(&Core_ServiceDesc, srv)
}

func _Core_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Ping(ctx, req.(*PingMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Install_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Component)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Install(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/Install",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Install(ctx, req.(*Component))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Uninstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComponentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Uninstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/Uninstall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Uninstall(ctx, req.(*ComponentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_ComponentExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComponentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).ComponentExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/ComponentExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).ComponentExist(ctx, req.(*ComponentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Core/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Register(ctx, req.(*ServerInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Core_ServiceDesc is the grpc.ServiceDesc for Core service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Core_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Core",
	HandlerType: (*CoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Core_Ping_Handler,
		},
		{
			MethodName: "Install",
			Handler:    _Core_Install_Handler,
		},
		{
			MethodName: "Uninstall",
			Handler:    _Core_Uninstall_Handler,
		},
		{
			MethodName: "ComponentExist",
			Handler:    _Core_ComponentExist_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Core_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/component_service.proto",
}

// TraitsClient is the client API for Traits service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TraitsClient interface {
}

type traitsClient struct {
	cc grpc.ClientConnInterface
}

func NewTraitsClient(cc grpc.ClientConnInterface) TraitsClient {
	return &traitsClient{cc}
}

// TraitsServer is the server API for Traits service.
// All implementations must embed UnimplementedTraitsServer
// for forward compatibility
type TraitsServer interface {
	mustEmbedUnimplementedTraitsServer()
}

// UnimplementedTraitsServer must be embedded to have forward compatible implementations.
type UnimplementedTraitsServer struct {
}

func (UnimplementedTraitsServer) mustEmbedUnimplementedTraitsServer() {}

// UnsafeTraitsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TraitsServer will
// result in compilation errors.
type UnsafeTraitsServer interface {
	mustEmbedUnimplementedTraitsServer()
}

func RegisterTraitsServer(s grpc.ServiceRegistrar, srv TraitsServer) {
	s.RegisterService(&Traits_ServiceDesc, srv)
}

// Traits_ServiceDesc is the grpc.ServiceDesc for Traits service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Traits_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Traits",
	HandlerType: (*TraitsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "proto/component_service.proto",
}
